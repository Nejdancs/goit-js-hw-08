{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SCAA,SAASC,EAAQC,GAAmV,OAAtOD,EAArD,mBAAXE,QAAoD,iBAApBA,OAAOC,SAAmC,SAAiBC,GAAO,cAAcA,GAA2B,SAAiBA,GAAO,OAAOA,GAAyB,mBAAXF,QAAyBE,EAAIC,cAAgBH,QAAUE,IAAQF,OAAOI,UAAY,gBAAkBF,IAAyBH,GAEpW,SAAAM,EAAsBC,GAGnC,KAFgC,iBAAVA,GAAsBA,aAAiBC,QAE9C,CACb,IAAIC,EAAcV,EAAQQ,GAG1B,MADc,OAAVA,EAAgBE,EAAc,OAAgC,WAAhBA,IAA0BA,EAAcF,EAAMH,YAAYM,MACtG,IAAIC,UAAU,oCAAoCC,OAAOH,KCTpD,SAAAI,IACb,IAAIV,EAAMW,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAC1EG,EAAWH,UAAUC,OAAS,EAAID,UAAU,QAAKE,EAErD,IAAK,IAAIE,KAAOD,OACU,IAAbd,EAAIe,KACbf,EAAIe,GAAOD,EAASC,IAIxB,OAAOf,ECVT,SAASgB,EAAQnB,GAAmV,OAAtOmB,EAArD,mBAAXlB,QAAoD,iBAApBA,OAAOC,SAAmC,SAAiBC,GAAO,cAAcA,GAA2B,SAAiBA,GAAO,OAAOA,GAAyB,mBAAXF,QAAyBE,EAAIC,cAAgBH,QAAUE,IAAQF,OAAOI,UAAY,gBAAkBF,IAAyBH,GAKpW,SAAAoB,EAAsBC,EAAKC,GAExC,IAAIC,EACAC,EAFJlB,EAAae,GAIY,WAArBF,EAAQG,IACVC,EAAMD,EAAQC,KAAO,EACrBC,EAAMF,EAAQE,MAGdD,EAAMT,UAAU,GAChBU,EAAMV,UAAU,IAGlB,IAAIW,EAAMC,UAAUL,GAAKM,MAAK,SAAUZ,OAAS,EACjD,OAAOU,GAAOF,SAAuB,IAARC,GAAuBC,GAAOD,GClB7D,IAAII,EAAuB,CACzBC,aAAa,EACbC,mBAAmB,EACnBC,oBAAoB,EACpBC,mBAAmB,EACnBC,gBAAgB,GCwBlB,IAAIC,EAAoB,uDACpBC,EAAoB,IAAIvB,OAAOsB,EAAmB,WAAWtB,OAAOsB,GACpEE,EAAoB,IAAIC,OAAO,IAAIzB,OAAOuB,EAAmB,MAC7DG,EAAoB,uBACpBC,EAAoB,IAAIF,OAAO,KAAO,MAAMzB,OAAO0B,EAAmB,YAAY1B,OAAO0B,EAAmB,QAAU,MAAM1B,OAAO0B,EAAmB,YAAY1B,OAAOuB,EAAmB,MAAMvB,OAAO0B,EAAmB,QAAU,MAAM1B,OAAO0B,EAAmB,aAAa1B,OAAOuB,EAAmB,OAAOvB,OAAO0B,EAAmB,cAAgB,MAAM1B,OAAO0B,EAAmB,cAAc1B,OAAO0B,EAAmB,WAAW1B,OAAOuB,EAAmB,OAAOvB,OAAO0B,EAAmB,cAAgB,MAAM1B,OAAO0B,EAAmB,cAAc1B,OAAO0B,EAAmB,WAAW1B,OAAOuB,EAAmB,OAAOvB,OAAO0B,EAAmB,cAAgB,MAAM1B,OAAO0B,EAAmB,cAAc1B,OAAO0B,EAAmB,WAAW1B,OAAOuB,EAAmB,OAAOvB,OAAO0B,EAAmB,cAAgB,MAAM1B,OAAO0B,EAAmB,cAAc1B,OAAO0B,EAAmB,WAAW1B,OAAOuB,EAAmB,OAAOvB,OAAO0B,EAAmB,cAAgB,YAAY1B,OAAO0B,EAAmB,WAAW1B,OAAOuB,EAAmB,SAASvB,OAAO0B,EAAmB,cAAgB,4BACzkC,SAAAE,EAAcnB,GAC3B,IAAIoB,EAAU3B,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAIlF,GAHAR,EAAae,KACboB,EAAUjC,OAAOiC,IAGf,OAAOD,EAAKnB,EAAK,IAAMmB,EAAKnB,EAAK,GAGnC,GAAgB,MAAZoB,EAAiB,CACnB,IAAKL,EAAkBM,KAAKrB,GAC1B,OAAO,EAGT,IAAIsB,EAAQtB,EAAIM,MAAM,KAAKiB,MAAK,SAAUC,EAAGC,GAC3C,OAAOD,EAAIC,KAEb,OAAOH,EAAM,IAAM,IAGrB,MAAgB,MAAZF,KACOF,EAAkBG,KAAKrB,GCpDpC,IAAI0B,EAAwB,CAC1BC,oBAAoB,EACpBC,sBAAsB,EACtBC,uBAAuB,EACvBrB,aAAa,EACbsB,kBAAmB,GACnBC,mBAAmB,EACnBC,eAAgB,IAMdC,EAAgB,iCAChBC,EAAa,yCACbC,EAAa,aACbC,EAAe,kGACfC,EAAiB,gFACjBC,EAAmB,gLAuCR,SAAAC,EAAiBvC,EAAKC,GAInC,GAHAhB,EAAae,IACbC,EAAUT,EAAMS,EAASyB,IAEbE,sBAAwB3B,EAAQ0B,mBAAoB,CAC9D,IAAIa,EAAgBxC,EAAIyC,MAAMR,GAE9B,GAAIO,EAAe,CACjB,IAAIE,EAAeF,EAAc,GAYjC,GATAxC,EAAMA,EAAI2C,QAAQD,EAAc,IAAIC,QAAO,WAAa,IAKpDD,EAAaE,SAAS,OACxBF,EAAeA,EAAaG,OAAO,EAAGH,EAAahD,OAAS,KA7CpE,SAA6BgD,GAC3B,IAAII,EAA8BJ,EAAaC,QAAO,WAAa,MAEnE,IAAKG,EAA4BC,OAC/B,OAAO,EAMT,GAFuB,WAAW1B,KAAKyB,GAEjB,CAGpB,GAAIA,IAAgCJ,EAClC,OAAO,EAMT,GAFgCI,EAA4BxC,MAAM,KAAKZ,SAAWoD,EAA4BxC,MAAM,OAAOZ,OAGzH,OAAO,EAIX,OAAO,EAuBEsD,CAAoBN,GACvB,OAAO,OAEJ,GAAIzC,EAAQ2B,qBACjB,OAAO,EAIX,IAAK3B,EAAQ8B,mBAAqB/B,EAAIN,OAlEZ,IAmExB,OAAO,EAGT,IAAI4B,EAAQtB,EAAIM,MAAM,KAClB2C,EAAS3B,EAAM4B,MACfC,EAAeF,EAAOG,cAE1B,GAAInD,EAAQ+B,eAAeqB,SAASF,GAClC,OAAO,EAGT,IAAIG,EAAOhC,EAAMiC,KAAK,KAEtB,GAAItD,EAAQuD,6BAAgD,cAAjBL,GAAiD,mBAAjBA,GAAoC,CAU7G,IAAIM,GAFJH,EAAOA,EAAKF,eAEQ9C,MAAM,KAAK,GAE/B,IAAKP,EAAa0D,EAASd,QAAO,MAAQ,IAAK,CAC7CzC,IAAK,EACLC,IAAK,KAEL,OAAO,EAKT,IAFA,IAAIuD,EAAcD,EAASnD,MAAM,KAExBqD,EAAI,EAAGA,EAAID,EAAYhE,OAAQiE,IACtC,IAAKxB,EAAcd,KAAKqC,EAAYC,IAClC,OAAO,EAKb,MAAkC,IAA9B1D,EAAQ8B,mBAAiChC,EAAauD,EAAM,CAC9DnD,IAAK,MACAJ,EAAakD,EAAQ,CAC1B9C,IAAK,OAEL,OAAO,EAGT,IFnIa,SAAgBH,EAAKC,GAClChB,EAAae,IACbC,EAAUT,EAAMS,EAASM,IAGbG,oBAA8C,MAAxBV,EAAIA,EAAIN,OAAS,KACjDM,EAAMA,EAAI4D,UAAU,EAAG5D,EAAIN,OAAS,KAKP,IAA3BO,EAAQW,gBAAiD,IAAtBZ,EAAI6D,QAAQ,QACjD7D,EAAMA,EAAI4D,UAAU,IAGtB,IAAItC,EAAQtB,EAAIM,MAAM,KAClBwD,EAAMxC,EAAMA,EAAM5B,OAAS,GAE/B,GAAIO,EAAQO,YAAa,CAEvB,GAAIc,EAAM5B,OAAS,EACjB,OAAO,EAGT,IAAK,qFAAqF2B,KAAKyC,GAC7F,OAAO,EAIT,GAAI,KAAKzC,KAAKyC,GACZ,OAAO,EAKX,SAAK7D,EAAQU,mBAAqB,QAAQU,KAAKyC,KAIxCxC,EAAMyC,OAAM,SAAUC,GAC3B,QAAIA,EAAKtE,OAAS,KAIb,8BAA8B2B,KAAK2C,IAKpC,kBAAkB3C,KAAK2C,IAKvB,QAAQ3C,KAAK2C,KAIZ/D,EAAQQ,mBAAqB,IAAIY,KAAK2C,OEyExCC,CAAOhB,EAAQ,CAClBzC,YAAaP,EAAQO,cACnB,CACF,IAAKP,EAAQiE,gBACX,OAAO,EAGT,IAAK/C,EAAK8B,GAAS,CACjB,IAAKA,EAAOkB,WAAW,OAASlB,EAAOL,SAAS,KAC9C,OAAO,EAGT,IAAIwB,EAAkBnB,EAAOJ,OAAO,EAAGI,EAAOvD,OAAS,GAEvD,GAA+B,IAA3B0E,EAAgB1E,SAAiByB,EAAKiD,GACxC,OAAO,GAKb,GAAgB,MAAZd,EAAK,GAEP,OADAA,EAAOA,EAAKe,MAAM,EAAGf,EAAK5D,OAAS,GAC5BO,EAAQ4B,sBAAwBS,EAAoBjB,KAAKiC,GAAQlB,EAAgBf,KAAKiC,GAM/F,IAHA,IAAIgB,EAAUrE,EAAQ4B,sBAAwBQ,EAAoBH,EAC9DqC,EAAajB,EAAKhD,MAAM,KAEnBkE,EAAK,EAAGA,EAAKD,EAAW7E,OAAQ8E,IACvC,IAAKF,EAAQjD,KAAKkD,EAAWC,IAC3B,OAAO,EAIX,OAAIvE,EAAQ6B,oBACwE,IAA9EwB,EAAKmB,OAAO,IAAIzD,OAAO,IAAIzB,OAAOU,EAAQ6B,kBAAmB,MAAO,MNzK5E,IAGe4C,EAHPC,EOJR,SAA2B9E,EAAK+E,GAC9B,IACE,IAAMC,EAAcC,KAAKC,UAAUH,GACnCI,aAAaC,QAAQpF,EAAKgF,GAC1B,MAAOK,GACPC,QAAQD,MAAMA,EAAME,WPDGC,EOK3B,SAAyBxF,GACvB,IAAMyF,EAAYN,aAAaO,QAAQ1F,GAEvC,IAAKyF,EACH,OAGF,IACE,OAAOR,KAAKU,MAAMF,GAClB,MAAOJ,GACPC,QAAQM,IAAIP,EAAME,WPdhBM,EAAUC,SAASC,cAAc,kBACjCC,EAAmB,sBACrBC,EAA4C,QAAjCpB,EAAAW,EAAgBQ,UAAiB,IAAjCnB,EAAAA,EAAqC,GAEpDgB,EAAQK,iBAAiB,QAASC,EAAAxH,EAAA,EAKlC,SAAqByH,SAAAA,EAAEC,OAAUtB,EAAKuB,EAALvB,MAAOvF,EAAI8G,EAAJ9G,KACtCyG,EAASzG,GAAQuF,EAEjBD,EAAkBkB,EAAkBC,KARkB,MACxDJ,EAAQK,iBAAiB,UAuBzB,SAAkBK,GAChBA,EAAEC,iBAEF,IAEYC,EAARF,EAAEF,OADJK,SAAYC,EAAKF,EAALE,MAAOpB,EAAOkB,EAAPlB,QAGrB,IAAK7C,EAAQiE,EAAM5B,OAEC,YADlB6B,MAAM,8BAIR,IAAKrB,EAAQR,MAEX,YADA6B,MAAM,qCAIRtB,QAAQM,IAAIK,GACZM,EAAEF,OAAOQ,QACT1B,aAAa2B,WAAWd,GACxBC,EAAW,MAjCb,WACE,GAAwB,IAApBA,EAASpG,OACX,OAGF,IAAQ6G,EAAab,EAAba,SACaK,OAAOC,KAAKf,GAEpBgB,SAAQ,SAAAjH,GACnB0G,EAAS1G,GAAK+E,MAAQkB,EAASjG,MAjBnCkH","sources":["src/js/03-feedback.js","node_modules/validator/es/lib/util/assertString.js","node_modules/validator/es/lib/util/merge.js","node_modules/validator/es/lib/isByteLength.js","node_modules/validator/es/lib/isFQDN.js","node_modules/validator/es/lib/isIP.js","node_modules/validator/es/lib/isEmail.js","src/js/storage.js"],"sourcesContent":["import throttle from 'lodash.throttle';\nimport isEmail from 'validator/es/lib/isEmail';\nimport '../css/common.css';\nimport '../css/03-feedback.css';\nimport storage from './storage';\n\nconst { saveLocaleStorage, getLocalStorage } = storage;\nconst formRef = document.querySelector('.feedback-form');\nconst LOCALSTORAGE_KEY = 'feedback-form-state';\nlet formData = getLocalStorage(LOCALSTORAGE_KEY) ?? {};\n\nformRef.addEventListener('input', throttle(onFormInput, 500));\nformRef.addEventListener('submit', onSubmit);\n\nupdateFormInput();\n\nfunction onFormInput({ target: { value, name } }) {\n  formData[name] = value;\n\n  saveLocaleStorage(LOCALSTORAGE_KEY, formData);\n}\n\nfunction updateFormInput() {\n  if (formData.length === 0) {\n    return;\n  }\n\n  const { elements } = formRef;\n  const keysFormData = Object.keys(formData);\n\n  keysFormData.forEach(key => {\n    elements[key].value = formData[key];\n  });\n}\n\nfunction onSubmit(e) {\n  e.preventDefault();\n\n  const {\n    elements: { email, message },\n  } = e.target;\n\n  if (!isEmail(email.value)) {\n    alert('Email должен быть валидным');\n    return;\n  }\n\n  if (!message.value) {\n    alert('Заполните пожалуйста поле message');\n    return;\n  }\n\n  console.log(formData);\n  e.target.reset();\n  localStorage.removeItem(LOCALSTORAGE_KEY);\n  formData = {};\n}\n","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nexport default function assertString(input) {\n  var isString = typeof input === 'string' || input instanceof String;\n\n  if (!isString) {\n    var invalidType = _typeof(input);\n\n    if (input === null) invalidType = 'null';else if (invalidType === 'object') invalidType = input.constructor.name;\n    throw new TypeError(\"Expected a string but received a \".concat(invalidType));\n  }\n}","export default function merge() {\n  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var defaults = arguments.length > 1 ? arguments[1] : undefined;\n\n  for (var key in defaults) {\n    if (typeof obj[key] === 'undefined') {\n      obj[key] = defaults[key];\n    }\n  }\n\n  return obj;\n}","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport assertString from './util/assertString';\n/* eslint-disable prefer-rest-params */\n\nexport default function isByteLength(str, options) {\n  assertString(str);\n  var min;\n  var max;\n\n  if (_typeof(options) === 'object') {\n    min = options.min || 0;\n    max = options.max;\n  } else {\n    // backwards compatibility: isByteLength(str, min [, max])\n    min = arguments[1];\n    max = arguments[2];\n  }\n\n  var len = encodeURI(str).split(/%..|./).length - 1;\n  return len >= min && (typeof max === 'undefined' || len <= max);\n}","import assertString from './util/assertString';\nimport merge from './util/merge';\nvar default_fqdn_options = {\n  require_tld: true,\n  allow_underscores: false,\n  allow_trailing_dot: false,\n  allow_numeric_tld: false,\n  allow_wildcard: false\n};\nexport default function isFQDN(str, options) {\n  assertString(str);\n  options = merge(options, default_fqdn_options);\n  /* Remove the optional trailing dot before checking validity */\n\n  if (options.allow_trailing_dot && str[str.length - 1] === '.') {\n    str = str.substring(0, str.length - 1);\n  }\n  /* Remove the optional wildcard before checking validity */\n\n\n  if (options.allow_wildcard === true && str.indexOf('*.') === 0) {\n    str = str.substring(2);\n  }\n\n  var parts = str.split('.');\n  var tld = parts[parts.length - 1];\n\n  if (options.require_tld) {\n    // disallow fqdns without tld\n    if (parts.length < 2) {\n      return false;\n    }\n\n    if (!/^([a-z\\u00A1-\\u00A8\\u00AA-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {\n      return false;\n    } // disallow spaces\n\n\n    if (/\\s/.test(tld)) {\n      return false;\n    }\n  } // reject numeric TLDs\n\n\n  if (!options.allow_numeric_tld && /^\\d+$/.test(tld)) {\n    return false;\n  }\n\n  return parts.every(function (part) {\n    if (part.length > 63) {\n      return false;\n    }\n\n    if (!/^[a-z_\\u00a1-\\uffff0-9-]+$/i.test(part)) {\n      return false;\n    } // disallow full-width chars\n\n\n    if (/[\\uff01-\\uff5e]/.test(part)) {\n      return false;\n    } // disallow parts starting or ending with hyphen\n\n\n    if (/^-|-$/.test(part)) {\n      return false;\n    }\n\n    if (!options.allow_underscores && /_/.test(part)) {\n      return false;\n    }\n\n    return true;\n  });\n}","import assertString from './util/assertString';\n/**\n11.3.  Examples\n\n   The following addresses\n\n             fe80::1234 (on the 1st link of the node)\n             ff02::5678 (on the 5th link of the node)\n             ff08::9abc (on the 10th organization of the node)\n\n   would be represented as follows:\n\n             fe80::1234%1\n             ff02::5678%5\n             ff08::9abc%10\n\n   (Here we assume a natural translation from a zone index to the\n   <zone_id> part, where the Nth zone of any scope is translated into\n   \"N\".)\n\n   If we use interface names as <zone_id>, those addresses could also be\n   represented as follows:\n\n            fe80::1234%ne0\n            ff02::5678%pvc1.3\n            ff08::9abc%interface10\n\n   where the interface \"ne0\" belongs to the 1st link, \"pvc1.3\" belongs\n   to the 5th link, and \"interface10\" belongs to the 10th organization.\n * * */\n\nvar IPv4SegmentFormat = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\nvar IPv4AddressFormat = \"(\".concat(IPv4SegmentFormat, \"[.]){3}\").concat(IPv4SegmentFormat);\nvar IPv4AddressRegExp = new RegExp(\"^\".concat(IPv4AddressFormat, \"$\"));\nvar IPv6SegmentFormat = '(?:[0-9a-fA-F]{1,4})';\nvar IPv6AddressRegExp = new RegExp('^(' + \"(?:\".concat(IPv6SegmentFormat, \":){7}(?:\").concat(IPv6SegmentFormat, \"|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){6}(?:\").concat(IPv4AddressFormat, \"|:\").concat(IPv6SegmentFormat, \"|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){5}(?::\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,2}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){4}(?:(:\").concat(IPv6SegmentFormat, \"){0,1}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,3}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){3}(?:(:\").concat(IPv6SegmentFormat, \"){0,2}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,4}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){2}(?:(:\").concat(IPv6SegmentFormat, \"){0,3}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,5}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){1}(?:(:\").concat(IPv6SegmentFormat, \"){0,4}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,6}|:)|\") + \"(?::((?::\".concat(IPv6SegmentFormat, \"){0,5}:\").concat(IPv4AddressFormat, \"|(?::\").concat(IPv6SegmentFormat, \"){1,7}|:))\") + ')(%[0-9a-zA-Z-.:]{1,})?$');\nexport default function isIP(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  assertString(str);\n  version = String(version);\n\n  if (!version) {\n    return isIP(str, 4) || isIP(str, 6);\n  }\n\n  if (version === '4') {\n    if (!IPv4AddressRegExp.test(str)) {\n      return false;\n    }\n\n    var parts = str.split('.').sort(function (a, b) {\n      return a - b;\n    });\n    return parts[3] <= 255;\n  }\n\n  if (version === '6') {\n    return !!IPv6AddressRegExp.test(str);\n  }\n\n  return false;\n}","import assertString from './util/assertString';\nimport merge from './util/merge';\nimport isByteLength from './isByteLength';\nimport isFQDN from './isFQDN';\nimport isIP from './isIP';\nvar default_email_options = {\n  allow_display_name: false,\n  require_display_name: false,\n  allow_utf8_local_part: true,\n  require_tld: true,\n  blacklisted_chars: '',\n  ignore_max_length: false,\n  host_blacklist: []\n};\n/* eslint-disable max-len */\n\n/* eslint-disable no-control-regex */\n\nvar splitNameAddress = /^([^\\x00-\\x1F\\x7F-\\x9F\\cX]+)</i;\nvar emailUserPart = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]+$/i;\nvar gmailUserPart = /^[a-z\\d]+$/;\nvar quotedEmailUser = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]))*$/i;\nvar emailUserUtf8Part = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+$/i;\nvar quotedEmailUserUtf8 = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*$/i;\nvar defaultMaxEmailLength = 254;\n/* eslint-enable max-len */\n\n/* eslint-enable no-control-regex */\n\n/**\n * Validate display name according to the RFC2822: https://tools.ietf.org/html/rfc2822#appendix-A.1.2\n * @param {String} display_name\n */\n\nfunction validateDisplayName(display_name) {\n  var display_name_without_quotes = display_name.replace(/^\"(.+)\"$/, '$1'); // display name with only spaces is not valid\n\n  if (!display_name_without_quotes.trim()) {\n    return false;\n  } // check whether display name contains illegal character\n\n\n  var contains_illegal = /[\\.\";<>]/.test(display_name_without_quotes);\n\n  if (contains_illegal) {\n    // if contains illegal characters,\n    // must to be enclosed in double-quotes, otherwise it's not a valid display name\n    if (display_name_without_quotes === display_name) {\n      return false;\n    } // the quotes in display name must start with character symbol \\\n\n\n    var all_start_with_back_slash = display_name_without_quotes.split('\"').length === display_name_without_quotes.split('\\\\\"').length;\n\n    if (!all_start_with_back_slash) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default function isEmail(str, options) {\n  assertString(str);\n  options = merge(options, default_email_options);\n\n  if (options.require_display_name || options.allow_display_name) {\n    var display_email = str.match(splitNameAddress);\n\n    if (display_email) {\n      var display_name = display_email[1]; // Remove display name and angle brackets to get email address\n      // Can be done in the regex but will introduce a ReDOS (See  #1597 for more info)\n\n      str = str.replace(display_name, '').replace(/(^<|>$)/g, ''); // sometimes need to trim the last space to get the display name\n      // because there may be a space between display name and email address\n      // eg. myname <address@gmail.com>\n      // the display name is `myname` instead of `myname `, so need to trim the last space\n\n      if (display_name.endsWith(' ')) {\n        display_name = display_name.substr(0, display_name.length - 1);\n      }\n\n      if (!validateDisplayName(display_name)) {\n        return false;\n      }\n    } else if (options.require_display_name) {\n      return false;\n    }\n  }\n\n  if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {\n    return false;\n  }\n\n  var parts = str.split('@');\n  var domain = parts.pop();\n  var lower_domain = domain.toLowerCase();\n\n  if (options.host_blacklist.includes(lower_domain)) {\n    return false;\n  }\n\n  var user = parts.join('@');\n\n  if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {\n    /*\n      Previously we removed dots for gmail addresses before validating.\n      This was removed because it allows `multiple..dots@gmail.com`\n      to be reported as valid, but it is not.\n      Gmail only normalizes single dots, removing them from here is pointless,\n      should be done in normalizeEmail\n    */\n    user = user.toLowerCase(); // Removing sub-address from username before gmail validation\n\n    var username = user.split('+')[0]; // Dots are not included in gmail length restriction\n\n    if (!isByteLength(username.replace(/\\./g, ''), {\n      min: 6,\n      max: 30\n    })) {\n      return false;\n    }\n\n    var _user_parts = username.split('.');\n\n    for (var i = 0; i < _user_parts.length; i++) {\n      if (!gmailUserPart.test(_user_parts[i])) {\n        return false;\n      }\n    }\n  }\n\n  if (options.ignore_max_length === false && (!isByteLength(user, {\n    max: 64\n  }) || !isByteLength(domain, {\n    max: 254\n  }))) {\n    return false;\n  }\n\n  if (!isFQDN(domain, {\n    require_tld: options.require_tld\n  })) {\n    if (!options.allow_ip_domain) {\n      return false;\n    }\n\n    if (!isIP(domain)) {\n      if (!domain.startsWith('[') || !domain.endsWith(']')) {\n        return false;\n      }\n\n      var noBracketdomain = domain.substr(1, domain.length - 2);\n\n      if (noBracketdomain.length === 0 || !isIP(noBracketdomain)) {\n        return false;\n      }\n    }\n  }\n\n  if (user[0] === '\"') {\n    user = user.slice(1, user.length - 1);\n    return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);\n  }\n\n  var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;\n  var user_parts = user.split('.');\n\n  for (var _i = 0; _i < user_parts.length; _i++) {\n    if (!pattern.test(user_parts[_i])) {\n      return false;\n    }\n  }\n\n  if (options.blacklisted_chars) {\n    if (user.search(new RegExp(\"[\".concat(options.blacklisted_chars, \"]+\"), 'g')) !== -1) return false;\n  }\n\n  return true;\n}","export default { saveLocaleStorage, getLocalStorage };\n\nfunction saveLocaleStorage(key, value) {\n  try {\n    const valueToJson = JSON.stringify(value);\n    localStorage.setItem(key, valueToJson);\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\nfunction getLocalStorage(key) {\n  const savedData = localStorage.getItem(key);\n\n  if (!savedData) {\n    return;\n  }\n\n  try {\n    return JSON.parse(savedData);\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n"],"names":["$dCfNN","parcelRequire","$d1d74a12f216232a$var$_typeof","obj1","Symbol","iterator","obj","constructor","prototype","$d1d74a12f216232a$export$2e2bcd8739ae039","input","String","invalidType","name","TypeError","concat","$0a526066a8713c7b$export$2e2bcd8739ae039","arguments","length","undefined","defaults","key","$606613f430d0a054$var$_typeof","$606613f430d0a054$export$2e2bcd8739ae039","str","options","min","max","len","encodeURI","split","$7fe6dc53c33bdd41$var$default_fqdn_options","require_tld","allow_underscores","allow_trailing_dot","allow_numeric_tld","allow_wildcard","$886bd2c40b215a74$var$IPv4SegmentFormat","$886bd2c40b215a74$var$IPv4AddressFormat","$886bd2c40b215a74$var$IPv4AddressRegExp","RegExp","$886bd2c40b215a74$var$IPv6SegmentFormat","$886bd2c40b215a74$var$IPv6AddressRegExp","$886bd2c40b215a74$export$2e2bcd8739ae039","version","test","parts","sort","a","b","$1007e3231928cbb8$var$default_email_options","allow_display_name","require_display_name","allow_utf8_local_part","blacklisted_chars","ignore_max_length","host_blacklist","$1007e3231928cbb8$var$splitNameAddress","$1007e3231928cbb8$var$emailUserPart","$1007e3231928cbb8$var$gmailUserPart","$1007e3231928cbb8$var$quotedEmailUser","$1007e3231928cbb8$var$emailUserUtf8Part","$1007e3231928cbb8$var$quotedEmailUserUtf8","$1007e3231928cbb8$export$2e2bcd8739ae039","display_email","match","display_name","replace","endsWith","substr","display_name_without_quotes","trim","$1007e3231928cbb8$var$validateDisplayName","domain","pop","lower_domain","toLowerCase","includes","user","join","domain_specific_validation","username","_user_parts","i","substring","indexOf","tld","every","part","$7fe6dc53c33bdd41$export$2e2bcd8739ae039","allow_ip_domain","startsWith","noBracketdomain","slice","pattern","user_parts","_i","search","ref","$b00c40859be242c5$var$saveLocaleStorage","value","valueToJson","JSON","stringify","localStorage","setItem","error","console","message","$b00c40859be242c5$var$getLocalStorage","savedData","getItem","parse","log","$b00c40859be242c5$var$formRef","document","querySelector","$b00c40859be242c5$var$LOCALSTORAGE_KEY","$b00c40859be242c5$var$formData","addEventListener","$parcel$interopDefault","param","target","_target","e","preventDefault","_elements","elements","email","alert","reset","removeItem","Object","keys","forEach","$b00c40859be242c5$var$updateFormInput"],"version":3,"file":"03-feedback.939f96ec.js.map"}